board = [
        [7, 8, 0, 4, 0, 0, 1, 2, 0],
        [6, 0, 0, 0, 7, 5, 0, 0, 9],
        [0, 0, 0, 6, 0, 1, 0, 7, 8],
        [0, 0, 7, 0, 4, 0, 2, 6, 0],
        [0, 0, 1, 0, 5, 0, 9, 3, 0],
        [9, 0, 4, 0, 6, 0, 0, 0, 5],
        [0, 7, 0, 3, 0, 0, 0, 1, 2],
        [1, 2, 0, 0, 0, 7, 4, 0, 0],
        [0, 4, 9, 2, 0, 6, 0, 0, 7]
    ]



def solve(game):
    find = find_empty(game)
    if not find:
        return True
    else:
        row, col = find

    for i in range(1,10):
        if valid (game, i, (row,  col)):
            game[row][col] = i

            if solve(game):
                return True
            
            game[row] [col] = 0    # this is the backtracking part of the algorithm

    return False

    
def valid(game,num,pos):
    # Check row
    for i in range(len(game[0])):                  # checks the row
        if game[pos[0]][i] == num and pos[1] != i:
            return False
        
    for i in range(len(game)):                     # Checks the column
        if game [i] [pos[1]] == num and pos[1] != i:
            return False
        
    box_x = pos [1] // 3
    box_y = pos [0] // 3

    for i in range(box_y * 3,box_y * 3 + 3):
        for j in range(box_x * 3,box_x * 3 + 3):
            if game[i][j] == num and (i,j) != pos:
                return False 
            
    return True


def print_board(game):
    for i in range(len(game)):
        if i % 3 == 0 and i != 0:       # this line means youre at the end of the third row, print a line to separate rows.
            print('----------------------------------------')

        for j in range(len(game[0])):
           if j % 3 == 0 and j != 0:
               print('|', end="  ")


           if j == 8:           # j == 8 means end of the row print new line.
               print(game[i][j])
           else:
               print (str(game[i][j]) + "  ", end=" ")


def find_empty(game):
    for i in range(len(game)):
        for j in range(len(game)):
            if game[i][j] == 0:
                return (i,j)     # i = column, j = row
    
    return None

solve(board)
print_board(board)
